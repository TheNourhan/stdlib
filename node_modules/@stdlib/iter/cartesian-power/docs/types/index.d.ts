/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

import { Iterator as Iter, IterableIterator } from '@stdlib/types/iter';
import { ArrayLike } from '@stdlib/types/array';

// Define a union type representing both iterable and non-iterable iterators:
type Iterator = Iter | IterableIterator;

/**
* Returns an iterator which generates the Cartesian power of an input array-like object.
*
* @param x - Input array-like object.
* @param n - Integer power.
* @throws {TypeError} first argument must be an array-like object
* @throws {TypeError} second argument must be a nonnegative integer
* @returns iterator
*
* @example
* import iterCartesianPower = require( '@stdlib/iter/cartesian-power' );
*
* var arr = ['a', 'b', 'c'];
* var n = 2;
* var iterator = iterCartesianPower(arr, n);
*
* var result;
* while (!(result = iterator.next()).done) {
*     console.log(result.value);
* }
*/
declare function iterCartesianPower<T>(x: ArrayLike<T> | Iterable<T>, n: number): Iterator;

// EXPORTS //

export = iterCartesianPower;
