/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //
var setReadOnly = require('@stdlib/utils/define-nonenumerable-read-only-property');
var isNumber = require('@stdlib/assert/is-number').isPrimitive;
var isnan = require('@stdlib/math/base/assert/is-nan');
var isNonNegativeInteger = require('@stdlib/assert/is-nonnegative-integer').isPrimitive;
var iteratorSymbol = require('@stdlib/symbol/iterator');
var format = require('@stdlib/string/format');

// MAIN //

/**
* Returns an iterator which generates the Cartesian power of an input array-like object.
*
* @param {Array|TypedArray|Iterable} x - Input array-like object.
* @param {number} n - Integer power.
* @throws {TypeError} first argument must be an array-like object
* @throws {TypeError} second argument must be a nonnegative integer
* @returns {Iterator} iterator
*
* @example
* var iterCartesianPower = require( '@stdlib/iter/cartesian-power' );
*
* var arr = ['a', 'b', 'c'];
* var n = 2;
* var iterator = iterCartesianPower(arr, n);
*
* var result;
* while (!(result = iterator.next()).done) {
*     console.log(result.value);
* }
*/

function iterCartesianPower(x, n) {
    var iter;
    var FLG = false;
    var i = 0;
    var j = [];
    var idx = [];

    // Validate input arguments
    if (!Array.isArray(x) && !isTypedArray(x) && !isIterable(x)) {
        throw new TypeError('invalid argument. First argument must be an array-like object.');
    }
    if (!isNumber(n) || isnan(n)) {
        throw new TypeError(format('invalid argument. Second argument must be a number. Value: `%s`.', n));
    }
    if (!isNonNegativeInteger(n)) {
        throw new TypeError('invalid argument. Second argument must be a nonnegative integer.');
    }

    // Initialize index array
    for (var k = 0; k < n; k++) {
        idx.push(0);
    }

    // Create an iterator protocol-compliant object
    iter = {};
    setReadOnly(iter, 'next', next);
    setReadOnly(iter, 'return', end);

    // If an environment supports `Symbol.iterator`, make the iterator iterable
    if (iteratorSymbol) {
        setReadOnly(iter, iteratorSymbol, factory);
    }
    return iter;

    /**
     * Returns an iterator protocol-compliant object containing the next iterated value.
     *
     * @private
     * @returns {Object} iterator protocol-compliant object
     */
    function next() {
        if (FLG) {
            return { 'done': true };
        }
        var res = [];
        for (var k = 0; k < n; k++) {
            res.push(x[idx[k]]);
        }
        // Update indices
        for (var k = n - 1; k >= 0; k--) {
            idx[k]++;
            if (idx[k] === x.length) {
                idx[k] = 0;
            } else {
                break;
            }
        }
        i++;
        if (i >= Math.pow(x.length, n)) {
            FLG = true;
        }
        return {
            'value': res,
            'done': false
        };
    }

    /**
     * Finishes an iterator.
     *
     * @private
     * @param {*} [value] - value to return
     * @returns {Object} iterator protocol-compliant object
     */
    function end(value) {
        FLG = true;
        if (arguments.length) {
            return { 'value': value, 'done': true };
        }
        return { 'done': true };
    }

    /**
     * Returns a new iterator.
     *
     * @private
     * @returns {Iterator} iterator
     */
    function factory() {
        return iterCartesianPower(x, n);
    }
}

// EXPORTS //
module.exports = iterCartesianPower;
