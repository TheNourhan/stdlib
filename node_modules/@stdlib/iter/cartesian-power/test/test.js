/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
'use strict';

var tape = require('tape');
var iterCartesianPower = require('./../lib');


tape('main export is a function', function test(t) {
	t.ok(iterCartesianPower instanceof Function, 'main export is a function');
	t.end();
});

tape('the function returns an iterator which generates all possible combinations of length `n` containing elements from the input array', function test(t) {
	var expected = [['a', 'a'], ['a', 'b'], ['a', 'c'], ['b', 'a'], ['b', 'b'], ['b', 'c'], ['c', 'a'], ['c', 'b'], ['c', 'c']];
	var actual = [];
	for (var v of iterCartesianPower(['a', 'b', 'c'], 2)) {
		actual.push(v);
	}
	t.deepEqual(actual, expected, 'returns expected values');
	t.end();
});

tape('the function returns an iterator which returns an empty array if `n` is 0', function test(t) {
	var iter = iterCartesianPower(['a', 'b', 'c'], 0);
	var actual = iter.next().value;
	var expected = [];
	t.deepEqual(actual, expected, 'returns expected value');
	t.end();
});

tape('the function returns an iterator which generates all individual elements of the input array when `n` is 1', function test(t) {
	var iter = iterCartesianPower(['a', 'b', 'c'], 1);
	var actual = [];
	for (var v of iter) {
		actual.push(v);
	}
	var expected = [['a'], ['b'], ['c']]
	t.deepEqual(actual, expected, 'returns expected value');
	t.end();
});
