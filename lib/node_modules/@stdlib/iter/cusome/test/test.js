/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var array2iterator = require( '@stdlib/array/to-iterator' );
var iterCuSome = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof iterCuSome, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided an iterator as a first argument', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			iterCuSome( value, 2 );
		};
	}
});

tape( 'the function throws an error if provided a second argument which is not a positive integer', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		-5,
		0,
		3.14,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			iterCuSome( array2iterator( [ 1, 2, 3 ] ), value );
		};
	}
});

tape( 'if provided an "empty" iterator, the function returns an iterator yielding `false` values', function test( t ) {
	var arr;
	var it;
	var v;

	arr = array2iterator( [] );
	it = iterCuSome( arr, 1 );

	v = it.next();
	t.strictEqual( v.value, false, 'returns false' );
	t.strictEqual( v.done, true, 'returns done as true' );

	t.end();
});

tape( 'the function returns an iterator which cumulatively tests whether at least `n` iterated values are truthy (example 1)', function test( t ) {
	var expected;
	var iterator;
	var actual;
	var arr;
	var v;

	arr = array2iterator( [ false, false, false, true, true ] );
	iterator = iterCuSome( arr, 2 );

	expected = [ false, false, false, false, true ];
	actual = [];

	while ( true ) {
		v = iterator.next();
		if ( v.done ) {
			break;
		}
		actual.push( v.value );
	}

	t.deepEqual( actual, expected, 'returns expected values' );
	t.end();
});

tape( 'the function returns an iterator which cumulatively tests whether at least `n` iterated values are truthy (example 2)', function test( t ) {
	var expected;
	var iterator;
	var actual;
	var arr;
	var v;

	arr = array2iterator( [ 1, 1, 0, 0, 0 ] );
	iterator = iterCuSome( arr, 2 );

	expected = [ false, true, true, true, true ];
	actual = [];

	while ( true ) {
		v = iterator.next();
		if ( v.done ) {
			break;
		}
		actual.push( v.value );
	}

	t.deepEqual( actual, expected, 'returns expected values' );
	t.end();
});
