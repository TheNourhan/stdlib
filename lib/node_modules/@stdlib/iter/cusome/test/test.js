/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var array2iterator = require( '@stdlib/array/to-iterator' );
var iterCuSome = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof iterCuSome, 'function', 'main export is a function' );
	t.end();
} );

tape( 'the function returns an iterator which tests whether at least `n` iterated values are truthy', function test( t ) {
	var expected;
	var iterator;
	var actual;
	var arr;
	var v;

	arr = array2iterator( [ false, false, false, true, true ] );
	iterator = iterCuSome( arr, 2 );
	expected = [ false, false, false, false, true ];
	actual = [];

	while ( true ) {
		v = iterator.next();
		if ( v.done ) {
			break;
		}
		actual.push( v.value );
	}
	t.deepEqual( actual, expected, 'returns expected values' );
	t.end();
} );

tape( 'the function returns an iterator which returns `true` once at least `n` truthy values have been iterated', function test( t ) {
	var iterator;
	var expected;
	var actual;
	var arr;
	var v;

	arr = array2iterator( [ 0, 0, 1, 1, 1 ] );
	iterator = iterCuSome( arr, 3 );
	expected = [ false, false, false, false, true ];
	actual = [];

	while ( true ) {
		v = iterator.next();
		if ( v.done ) {
			break;
		}
		actual.push( v.value );
	}
	t.deepEqual( actual, expected, 'returns expected values' );
	t.end();
} );

tape( 'the function returns an iterator which returns `false` if fewer than `n` truthy values are iterated', function test( t ) {
	var iterator;
	var expected;
	var actual;
	var arr;
	var v;

	arr = array2iterator( [ 0, 0, 0, 1, 1 ] );
	iterator = iterCuSome( arr, 3 );
	expected = [ false, false, false, false, false ];
	actual = [];

	while ( true ) {
		v = iterator.next();
		if ( v.done ) {
			break;
		}
		actual.push( v.value );
	}
	t.deepEqual( actual, expected, 'returns expected values' );
	t.end();
} );

tape( 'the function returns `true` immediately if the first `n` values are truthy', function test( t ) {
	var iterator;
	var expected;
	var actual;
	var arr;
	var v;

	arr = array2iterator( [ 1, 1, 0, 0, 0 ] );
	iterator = iterCuSome( arr, 2 );
	expected = [ false, true ];
	actual = [];

	while ( true ) {
		v = iterator.next();
		if ( v.done ) {
			break;
		}
		actual.push( v.value );
	}
	t.deepEqual( actual, expected, 'returns expected values' );
	t.end();
} );
