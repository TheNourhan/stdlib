/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns an iterator which tests whether at least `n` iterated values are truthy.
*
* @param {Iterator} iterator - source iterator
* @param {number} n - number of truthy values to test
* @returns {Iterator} iterator
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* var arr = array2iterator( [ false, false, false, true, true ] );
*
* var it = iterCuSome( arr, 2 );
*
* var v = it.next().value;
* // returns false
*
* v = it.next().value;
* // returns false
*
* v = it.next().value;
* // returns false
*
* v = it.next().value;
* // returns false
*
* v = it.next().value;
* // returns true
*
* var bool = it.next().done;
* // returns true
*/
function iterCuSome( iterator, n ) {
	var count;
	var done;
	var obj;

	count = 0;
	done = false;
	/**
	* Advances the iterator and checks if the condition is met.
	*
	* @returns {Object} - Object with `value` and `done` properties.
	*/
	function next() {
		var v;

		if ( done ) {
			return {
				'done': true
			};
		}
		v = iterator.next();
		if ( v.done ) {
			done = true;
			return {
				'value': count >= n,
				'done': true
			};
		}
		if ( v.value ) {
			count += 1;
		}
		if ( count >= n ) {
			done = true;
			return {
				'value': true,
				'done': false
			};
		}
		return {
			'value': false,
			'done': false
		};
	}

	// Define the iterator protocol
	obj = {};
	obj.next = next;
	obj[Symbol.iterator] = obj;

	return obj;
}


// EXPORTS //

module.exports = iterCuSome;
